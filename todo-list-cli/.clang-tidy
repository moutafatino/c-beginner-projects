---
# Educational clang-tidy config for learning C
# Each check group teaches you something important

Checks: >
  # MEMORY & SECURITY - Critical for C programming
  bugprone-*,
  clang-analyzer-*,
  cert-err33-c,
  cert-err34-c,
  cert-flp30-c,
  cert-msc30-c,
  cert-msc50-c,
  
  # CODE QUALITY - Learn good practices
  misc-*,
  performance-*,
  portability-*,
  
  # READABILITY - Make code maintainable
  readability-braces-around-statements,
  readability-else-after-return,
  readability-function-size,
  readability-identifier-naming,
  readability-magic-numbers,
  readability-misleading-indentation,
  readability-redundant-control-flow,
  readability-simplify-boolean-expr,
  
  # DISABLED - Not useful for learning C basics
  -concurrency-*,                    # Threading (you said you don't need this yet)
  -bugprone-easily-swappable-parameters,  # Too pedantic for learning
  -bugprone-reserved-identifier,     # System headers use these, not your problem
  -cert-dcl03-c,                     # Static assertions - advanced topic
  -cert-dcl37-c,                     # Reserved identifiers - not your concern
  -cert-exp*,                        # Expression rules - often too strict
  -cert-oop*,                        # Object-oriented rules - not relevant for C
  -misc-unused-parameters,           # Common in learning projects
  -misc-no-recursion,               # Recursion is a valid technique to learn
  -readability-function-cognitive-complexity,  # Too academic for learning
  -readability-identifier-length,    # Let you use short names while learning
  -readability-uppercase-literal-suffix     # Pedantic style rule

CheckOptions:
  # NAMING CONVENTIONS - Learn C conventions
  readability-identifier-naming.VariableCase: lower_case
  readability-identifier-naming.FunctionCase: lower_case
  readability-identifier-naming.MacroDefinitionCase: UPPER_CASE
  readability-identifier-naming.StructCase: CamelCase
  readability-identifier-naming.TypedefCase: lower_case
  readability-identifier-naming.TypedefSuffix: _t
  readability-identifier-naming.ConstantCase: UPPER_CASE
  
  # FUNCTION SIZE - Learn to keep functions manageable
  # readability-function-size.LineThreshold: 80
  # readability-function-size.StatementThreshold: 50
  # readability-function-size.ParameterThreshold: 8
  # readability-function-size.NestingThreshold: 4
  
  # MAGIC NUMBERS - Learn when constants are needed
  readability-magic-numbers.IgnoredIntegerValues: '0;1;2;-1;10;100;256;512;1024'
  readability-magic-numbers.IgnoredFloatingPointValues: '0.0;1.0;-1.0'
  readability-magic-numbers.IgnorePowersOf2IntegerValues: true
  readability-magic-numbers.IgnoreArraySize: false
  
  # ERROR HANDLING - Learn to check return values
  cert-err33-c.CheckedFunctions: 'malloc;calloc;realloc;fopen;fgets;fputs;fread;fwrite;scanf;strcpy;strcat;strlen'
  cert-err34-c.CheckedFunctions: 'atoi;atol;strtol;strtod;scanf;fscanf;sscanf'
  
  # MEMORY SAFETY - Critical for C
  bugprone-sizeof-expression.WarnOnSizeOfConstant: true
  bugprone-sizeof-expression.WarnOnSizeOfIntegerExpression: true
  bugprone-suspicious-string-compare.WarnOnImplicitComparison: true

HeaderFilterRegex: '.*'
FormatStyle: file
